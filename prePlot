#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Aug  3 10:32:44 2022

@author: joshuaumiamaka
"""

import matplotlib.pyplot as plt
import pickle
from sklearn import metrics
import numpy as np

pickle_file = 'all_images.pickle'

pik = pickle.load(open(pickle_file,'rb'))

predicted = 'pre_images.pickle'

loss, val_loss, acc, val_acc, X_train, y_train, X_valid, y_valid, valid_predictX_valid, train_predictX_train = pickle.load(open(predicted,'rb'))

def plot_confusion_matrix(valid_predictX_valid, input_data, input_labels):
    
    predictions = valid_predictX_valid

    # Convert to binary classification 
    predictions = (predictions > 0.5).astype('int32') 
    
    # Compute the confusion matrix by comparing the test labels (ds.test_labels) with the test predictions
    cm = metrics.confusion_matrix(input_labels, predictions, labels=[0, 1])
    cm = cm.astype('float')

    # Normalize the confusion matrix results. 
    cm_norm = cm / cm.sum(axis=1)[:, np.newaxis]
    
    # Plotting
    fig = plt.figure()
    ax = fig.add_subplot(111)

    ax.matshow(cm_norm, cmap='binary_r')

    plt.title('Confusion matrix', y=1.08)
    
    ax.set_xticks([1, 0])
    ax.set_xticklabels(['Supernova', 'No Supernova'])
    
    ax.set_yticks([1, 0])
    ax.set_yticklabels(['Supernova', 'No Supernova'])

    plt.xlabel('Predicted')
    plt.ylabel('True')

    fmt = '.2f'
    thresh = cm_norm.max() / 2.
    for i in range(cm_norm.shape[0]):
        for j in range(cm_norm.shape[1]):
            ax.text(j, i, format(cm_norm[i, j], fmt), 
                    ha="center", va="center", 
                    color="white" if cm_norm[i, j] < thresh else "black")
    plt.savefig("prePlot.pdf")
    plt.close()
    
plot_confusion_matrix(valid_predictX_valid, X_valid, y_valid)


